#
# Example Validation Skillety
#
name: example-validate-with-xpath-capture
label: A skillet standar-validation that Checks for Interfaces, Zones and Virtual routers names in place in double ISP environment.

description: |
  This Skillet validates a firewall standarization on 3 virtual routers, checks interfaces and zones

type: pan_validation
labels:
  collection:
    - Example Skillets
    - Validation

variables:
  # this willy allow the user to input a zone name to test
  - name: zone_to_test
    description: Name of the Security Zone facing Internet AKA Untrust
    default: untrust
    type_hint: text
  # as well as an IP address to search for as well
  - name: ip_to_find
    description: IP Address to locate
    default: 217.56.70.190/29
    type_hint: text    
  # virtual router MAIN
  - name: virtual_router_main
    description: virtual router main to check
    default: VR-MIL1
    type_hint: text
########################## ISP 1 ##############
  # virtual router ISP1
  - name: virtual_router_isp1
    description: virtual router ISP1 to check
    default: VR-MIL1-ISP1
    type_hint: text
  # interface_vr_isp1
  - name: interface_vr_isp1
    description: Interface on ISP1
    default: ethernet1/1
    type_hint: text
  # ISP1 Ipv4
  - name: isp1_ipv4
    description: ISP1 ipv4
    default: 217.56.70.190/29
    type_hint: text
  # ISP1 nexthop
  - name: isp1_nexthop
    description: ISP1 next hop
    default: 217.56.70.185
    type_hint: text
######################### ISP 2 ##############
  # virtual router ISP2
  - name: virtual_router_isp2
    description: virtual router ISP2 to check
    default: VR-MIL1-ISP2
    type_hint: text
  # interface_vr_isp2
  - name: interface_vr_isp2
    description: interface on ISP2
    default: ethernet1/4
    type_hint: text
  # ISP2 Ipv4
  - name: isp2_ipv4
    description: ISP2 ipv4
    default: 63.247.194.178/30
    type_hint: text
  # ISP2 nexthop
  - name: isp2_nexthop
    description: ISP2 next hop
    default: 63.247.194.177
    type_hint: text



snippets:
  - name: parse config variable and capture outputs
    cmd: parse
    variable: config
    outputs:
      # create a variable named 'zone_names' which will be a list of the attribute 'names' from each zone
      # note the use of '//' to select all zones
      # the '@name' will return only the value of the attribute 'name' from each 'entry'
      - name: zone_names
        capture_pattern: /config/devices/entry/vsys/entry/zone//entry/@name
      # note here we can combine an advanced xpath query with 'capture_object'. This will capture
      # the full interface definition from the interface that contains the 'ip_to_find' value
      - name: interface_with_ip
        capture_object: /config/devices/entry/network/interface/ethernet//entry/layer3/ip/entry[@name="{{ ip_to_find }}"]/../..
      ##### Interfaces on Virtual routers
      - name: interfaces_vr_isp1
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp1 }}']/interface
      - name: interfaces_vr_isp2
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp2 }}']/interface
      ##### Default routers main VR
      - name: main_default_isp1
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_main }}']/routing-table/ip/static-route/entry[@name='Default_ISP1']
      - name: main_default_isp2
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_main }}']/routing-table/ip/static-route/entry[@name='Default_ISP2']
      ##### Default route VR-ISP1 Default_ISP1
      - name: vr_isp1_default_isp1
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp1 }}']/routing-table/ip/static-route/entry[@name='Default_ISP1']
      - name: vr_isp1_default_isp1_monitor1
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp1 }}']/routing-table/ip/static-route/entry[@name='Default_ISP1']/path-monitor/monitor-destinations/entry[@name='OpenDNS1']
      - name: vr_isp1_default_isp1_monitor2
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp1 }}']/routing-table/ip/static-route/entry[@name='Default_ISP1']/path-monitor/monitor-destinations/entry[@name='OpenDNS2']
      - name: vr_isp1_default_isp1_monitor3
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp1 }}']/routing-table/ip/static-route/entry[@name='Default_ISP1']/path-monitor/monitor-destinations/entry[@name='GoogleDNS1']
      - name: vr_isp1_default_isp1_monitor4
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp1 }}']/routing-table/ip/static-route/entry[@name='Default_ISP1']/path-monitor/monitor-destinations/entry[@name='GoogleDNS2']
      - name: vr_isp1_default_isp1_monitor5
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp1 }}']/routing-table/ip/static-route/entry[@name='Default_ISP1']/path-monitor/monitor-destinations/entry[@name='CloudFare1']
      - name: vr_isp1_default_isp1_monitor6
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp1 }}']/routing-table/ip/static-route/entry[@name='Default_ISP1']/path-monitor/monitor-destinations/entry[@name='CloudFare2']
      - name: vr_isp1_default_isp1_monitor6a
        capture_value: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp1 }}']/routing-table/ip/static-route/entry[@name='Default_ISP1']/path-monitor/monitor-destinations/entry[@name='CloudFare2']
      ##### Default route VR-ISP1 Default_ISP2
      - name: vr_isp1_default_isp2
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp1 }}']/routing-table/ip/static-route/entry[@name='Default_ISP2']
      ##### Default route VR ISP2 Default_ISP2
      - name: vr_isp2_default_isp2
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp2 }}']/routing-table/ip/static-route/entry[@name='Default_ISP2']
      - name: vr_isp2_default_isp2_monitor1
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp2 }}']/routing-table/ip/static-route/entry[@name='Default_ISP2']/path-monitor/monitor-destinations/entry[@name='OpenDNS1']
      - name: vr_isp2_default_isp2_monitor2
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp2 }}']/routing-table/ip/static-route/entry[@name='Default_ISP2']/path-monitor/monitor-destinations/entry[@name='OpenDNS2']
      - name: vr_isp2_default_isp2_monitor3
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp2 }}']/routing-table/ip/static-route/entry[@name='Default_ISP2']/path-monitor/monitor-destinations/entry[@name='GoogleDNS1']
      - name: vr_isp2_default_isp2_monitor4
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp2 }}']/routing-table/ip/static-route/entry[@name='Default_ISP2']/path-monitor/monitor-destinations/entry[@name='GoogleDNS2']
      - name: vr_isp2_default_isp2_monitor5
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp2 }}']/routing-table/ip/static-route/entry[@name='Default_ISP2']/path-monitor/monitor-destinations/entry[@name='CloudFare1']
      - name: vr_isp2_default_isp2_monitor6
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp2 }}']/routing-table/ip/static-route/entry[@name='Default_ISP2']/path-monitor/monitor-destinations/entry[@name='CloudFare2']
      ##### Default route VR-ISP2 Default_ISP1
      - name: vr_isp2_default_isp1
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp2 }}']/routing-table/ip/static-route/entry[@name='Default_ISP1']
      

  # simple test using a jinja expression to verify the 'zone_to_test' variable is not in the 'zone_names' test
  - name: ensure_desired_zone_present_from_list
    # pan_validation skillet have a default cmd of 'validate'
    cmd: validate
    # note here that you can use jinja variable interpolation just about anywhere
    label: Ensures the {{ zone_to_test }} zone is configured
    test: zone_to_test in zone_names
    fail_message: |
      captured values were: 
      Security Zones list: {{ zone_names | tojson() }} 
    #  
    #  {{ interface_with_ip | default('none')| tojson() }}
    pass_message: |
      captured values were: 
      Security Zones list: {{ zone_names | tojson() }} 
    #  and 
    #  {{ interface_with_ip | default('none')| tojson() }}
    # documentation link helps give the user some context about why this test failed or how to manually remediate
    documentation_link: https://github.com/PaloAltoNetworks/skilletlib/blob/develop/docs/source/examples.rst
    
###############################################################################
  # the test checks use the dot notation to walk down the object tree to find children and values
  - name: device_network_vr
    cmd: parse
    variable: config
    outputs:
      - name: network_vr
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router
        
  - name: network_vrs_check_presence
    label: check all 3 virtual routers as main local isp and expereo
    test: |
       (
       network_vr | attribute_present('entry', 'name', '{{ virtual_router_main }}')
       and network_vr | attribute_present('entry', 'name', '{{ virtual_router_isp1 }}')
       and network_vr | attribute_present('entry', 'name', '{{ {{ virtual_router_isp2 }} }}')
       )
    fail_message: |
      All three virtual routers required are not present: {{ virtual_router_main }}, {{ virtual_router_isp1 }}, {{ virtual_router_isp2 }}
    pass_message: |
      All three virtual routers required are present: {{ virtual_router_main }}, {{ virtual_router_isp1 }}, {{ virtual_router_isp2 }}
    documentation_link: 
#####################################################################################
  # check if interfaces are in the right virtual router
  - name: vr_isp1
    label: check virtual router isp1 contains interface {{ interface_vr_isp1 }}
    test: interfaces_vr_isp1 | element_value_contains('interface.member', interface_vr_isp1)  
    fail_message: |
      Virtual router ISP1 does not contain Interface ISP1: 
      Interface: {{ interface_vr_isp1 }} 
      Interfaces on virtual-router ISP1: {{ interfaces_vr_isp1 | tojson() }} 
      {{ virtual_router }}
    pass_message: |
      Virtual router ISP contains Interface ISP1: 
      Interface: {{ interface_vr_isp1 }} 
      Interfaces on virtual-router ISP1: {{ interfaces_vr_isp1 | tojson() }} 
      {{ virtual_router }}
  - name: vr_isp2
    label: check virtual router isp2 contains interface {{ interface_vr_isp2 }}
    test: interfaces_vr_isp2 | element_value_contains('interface.member', interface_vr_isp2)  
    fail_message: |
      Virtual router ISP2 does not contain Interface ISP2: 
      Interface: {{ interface_vr_isp2 }} 
      Interfaces on virtual-router ISP2: {{ interfaces_vr_isp2 | tojson() }} 
      {{ virtual_router }}
    pass_message: |
      Virtual router ISP2 contains Interface ISP2: 
      Interface: {{ interface_vr_isp2 }} 
      Interfaces on virtual-router ISP2: {{ interfaces_vr_isp2 | tojson() }} 
      {{ virtual_router }}

################################################################################
  # check default ISP routes on main VR towards VR-ISP1 & VR-ISP2
  # Default_ISP1
  # Default_ISP2 metric 20
  # /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='VR-MIL1']/routing-table/ip/static-route/entry[@name='Default_ISP1']
  #
###  <entry name="Default_ISP1">
###  
###  <path-monitor>
###    <enable>no</enable>
###    <failure-condition>any</failure-condition>
###    <hold-time>2</hold-time>
###  </path-monitor>
###  
###  <nexthop>
###    <next-vr>VR-MIL1-ISP1</next-vr>
###  </nexthop>
###  
###  <bfd>
###    <profile>None</profile>
###  </bfd>
###  
###  <metric>10</metric>
###  <destination>0.0.0.0/0</destination>
###  
###  <route-table>
###  <unicast/>
###  </route-table>
###
### main_default_isp1
### main_default_isp2
###
  # check if default route ISP1 is in the main virtual-router
  - name: vr_main_isp1_default_route
    label: Check Main virtual-router contains default ISP1 route and metric 10
    test: |
       (
       main_default_isp1 | element_value_contains('nexthop.next-vr', virtual_router_isp1)  
       and main_default_isp1 | element_value_contains('metric', '10')
       and main_default_isp1 | element_value_contains('destination', '0.0.0.0/0')       
       ) 
    fail_message: |
      Main Virtual router does not contain default route to ISP1:

      Main Virtual Router: {{ virtual_router_main }}
      Virtual Router ISP1: {{ virtual_router_isp1 }} 
      
    pass_message: |
      Main Virtual router contains default route to ISP1: 

      Main Virtual Router: {{ virtual_router_main }}
      Virtual Router ISP1: {{ virtual_router_isp1 }} 

  # check if default route ISP2 is in the main virtual-router
  - name: vr_main_isp2_default_route
    label: Check Main virtual-router contains default ISP2 route and metric 20
    test: |
       (
       main_default_isp2 | element_value_contains('nexthop.next-vr', virtual_router_isp2)
       and main_default_isp2 | element_value_contains('metric', '20')
       and main_default_isp2 | element_value_contains('destination', '0.0.0.0/0')
       )

    fail_message: |
      Main Virtual router does not contain default route to ISP2:

      Main Virtual Router: {{ virtual_router_main }}
      Virtual Router ISP2: {{ virtual_router_isp2 }} 
      
    pass_message: |
      Main Virtual router contains default route to ISP2: 

      Main Virtual Router: {{ virtual_router_main }}
      Virtual Router ISP2: {{ virtual_router_isp2 }} 

################################################################################################
#########################    VR-ISP1 Default_ISP1 settings    ##################################
#########################                                     ##################################


  # check default ISP routes on VR-ISP1 & VR-ISP2
  # Default_ISP1
  # Default_ISP2 metric 20
  # /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='VR-MIL1-ISP1']/routing-table/ip/static-route/entry[@name='Default_ISP1']
  #
### <entry name="Default_ISP1">
### <path-monitor>
### <monitor-destinations>
###  <entry name="OpenDNS1">
###   <enable>yes</enable>
###   <source>217.56.70.190/29</source>
###   <destination>208.67.222.222</destination>
###   <interval>3</interval>
###   <count>5</count>
###  </entry>
###  <entry name="OpenDNS2">
###   <enable>yes</enable>
###   <source>217.56.70.190/29</source>
###   <destination>208.67.220.220</destination>
###   <interval>3</interval>
###   <count>5</count>
###   </entry>
### </monitor-destinations>
### <enable>yes</enable>
### <failure-condition>all</failure-condition>
### <hold-time>2</hold-time>
### </path-monitor>
###
### <nexthop>
###   <ip-address>217.56.70.185</ip-address>
### </nexthop>
### <bfd>
###   <profile>None</profile>
### </bfd>
### <interface>ethernet1/1</interface>
### <metric>10</metric>
### <destination>0.0.0.0/0</destination>
### <route-table>
### <unicast/>
### </route-table>
### </entry>  
  # check virtual router ISP1 contains requirements
  - name: vr_isp1_default_route
    label: Check virtual-router ISP1 contains default route next hop metric 10 interface enabled path mon failure condition
    test: |
       (
       vr_isp1_default_isp1 | element_value_contains('nexthop.ip-address', isp1_nexthop)  
       and vr_isp1_default_isp1 | element_value_contains('metric', '10')
       and vr_isp1_default_isp1 | element_value_contains('destination', '0.0.0.0/0')
       and vr_isp1_default_isp1 | element_value_contains('interface', interface_vr_isp1)      
       and vr_isp1_default_isp1 | element_value_contains('path-monitor.enable', 'yes')
       and vr_isp1_default_isp1 | element_value_contains('path-monitor.failure-condition', 'all')
       and vr_isp1_default_isp1_monitor1 | element_value_contains('destination', '208.67.222.222')
       ) 
    fail_message: |
      Virtual router does not contain default route to Inet:

      Virtual Router ISP1: {{ virtual_router_isp1 }}
                           {{ vr_isp1_default_isp1 }} 
      
    pass_message: |
      Virtual router ISP1 contains default route to Inet: 

      Virtual Router ISP1: {{ virtual_router_isp1 }} 
                           {{ vr_isp1_default_isp1 }}

################################################################################################
#########################    VR-ISP1 Default_ISP2 settings    ##################################
#########################                                     ##################################


  # check default ISP routes on VR-ISP1 & VR-ISP2
  # Default_ISP1 metric 10
  # Default_ISP2 metric 20
  # /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='VR-MIL1-ISP1']/routing-table/ip/static-route/entry[@name='Default_ISP2']
  #
###    <entry name="Default_ISP2">
###     <nexthop>
###      <next-vr>VR-MIL1-ISP2</next-vr>
###     </nexthop>
###    <bfd>
###     <profile>None</profile>
###    </bfd>
###    <path-monitor>
###     <enable>no</enable>
###     <failure-condition>any</failure-condition>
###     <hold-time>2</hold-time>
###    </path-monitor>
###    <metric>20</metric>
###    <destination>0.0.0.0/0</destination>

  # check virtual router ISP1 contains requirements
  - name: vr_isp1_default_route_isp2
    label: Check virtual-router ISP1 Default_ISP2 contains default route next hop metric 20 interface enabled path mon failure condition
    test: |
       (
       vr_isp1_default_isp2 | element_value_contains('nexthop.next-vr', virtual_router_isp2)  
       and vr_isp1_default_isp2 | element_value_contains('metric', '20')
       and vr_isp1_default_isp2 | element_value_contains('destination', '0.0.0.0/0')
       and vr_isp1_default_isp2 | element_value_contains('path-monitor.enable', 'no')
       ) 
    fail_message: |
      Virtual router does not contain Default_ISP2 route to next VR:

      Virtual Router ISP1 : {{ virtual_router_isp1 }}

      VR-ISP1 Default_ISP2: {{ vr_isp1_default_isp2 }} 
      
    pass_message: |
      Virtual router ISP1 contains Default_ISP2 route to next VR: 

      Virtual Router ISP1 : {{ virtual_router_isp1 }} 
      
      VR-ISP1 Default_ISP2: {{ vr_isp1_default_isp2 }}



################################################################################################
#########################    VR-ISP1 Default_ISP1 monitors    ##################################
#########################                                     ##################################

  # check virtual router ISP1 default ISP1 monitor 1
  - name: vr_isp1_default_route1_mon1
    label: Check virtual-router ISP1 default ISP route monitor 1 OpenDNS1
    test: |
       (
       vr_isp1_default_isp1_monitor1  | element_value_contains('source', isp1_ipv4)
       and vr_isp1_default_isp1_monitor1 | element_value_contains('enable', 'yes')
       and vr_isp1_default_isp1_monitor1 | element_value_contains('destination', '208.67.222.222')
       and vr_isp1_default_isp1_monitor1 | element_value_contains('interval', '3')
       and vr_isp1_default_isp1_monitor1 | element_value_contains('count', '5')
       ) 
    fail_message: |
      Virtual router does not contain default route to Inet:

      Virtual Router ISP1: {{ virtual_router_isp1 }} 
      IPv4 ISP1 {{ isp1_ipv4 }}
      Monitor 1 OpenDNS1: {{ vr_isp1_default_isp1_monitor1 }}

    pass_message: |
      Virtual router ISP1 contains default route to Inet: 

      Virtual Router ISP1: {{ virtual_router_isp1 }} 
      IPv4 ISP1 {{ isp1_ipv4 }}
      Monitor OpenDNS1: {{ vr_isp1_default_isp1_monitor1 }}

  # check virtual router ISP1 default ISP1 monitor 2
  - name: vr_isp1_default_route1_mon2
    label: Check virtual-router ISP1 default ISP route monitor 2 OpenDNS2
    test: |
       (
       vr_isp1_default_isp1_monitor2  | element_value_contains('source', isp1_ipv4)
       and vr_isp1_default_isp1_monitor2 | element_value_contains('enable', 'yes')
       and vr_isp1_default_isp1_monitor2 | element_value_contains('destination', '208.67.220.220')
       and vr_isp1_default_isp1_monitor2 | element_value_contains('interval', '3')
       and vr_isp1_default_isp1_monitor2 | element_value_contains('count', '5')
       ) 
    fail_message: |
      Virtual router does not contain default route to Inet:

      Virtual Router ISP1: {{ virtual_router_isp1 }} 
      IPv4 ISP1 {{ isp1_ipv4 }}
      Monitor 2 OpenDNS2: {{ vr_isp1_default_isp1_monitor2 }}

    pass_message: |
      Virtual router ISP1 contains default route to Inet: 

      Virtual Router ISP1: {{ virtual_router_isp1 }} 
      IPv4 ISP1 {{ isp1_ipv4 }}
      Monitor 2 OpenDNS2: {{ vr_isp1_default_isp1_monitor2 }}

  # check virtual router ISP1 default ISP1 monitor 3
  - name: vr_isp1_default_route1_mon3
    label: Check virtual-router ISP1 default ISP route monitor 3 GoogleDNS1
    test: |
       (
       vr_isp1_default_isp1_monitor3  | element_value_contains('source', isp1_ipv4)
       and vr_isp1_default_isp1_monitor3 | element_value_contains('enable', 'yes')
       and vr_isp1_default_isp1_monitor3 | element_value_contains('destination', '8.8.8.8')
       and vr_isp1_default_isp1_monitor3 | element_value_contains('interval', '3')
       and vr_isp1_default_isp1_monitor3 | element_value_contains('count', '5')
       ) 
    fail_message: |
      Virtual router does not contain default route to Inet:

      Virtual Router ISP1: {{ virtual_router_isp1 }} 
      IPv4 ISP1 {{ isp1_ipv4 }}
      Monitor 3 GoogleDNS1: {{ vr_isp1_default_isp1_monitor3 }}

    pass_message: |
      Virtual router ISP1 contains default route to Inet: 

      Virtual Router ISP1: {{ virtual_router_isp1 }} 
      IPv4 ISP1 {{ isp1_ipv4 }}
      Monitor 3 GoogleDNS1: {{ vr_isp1_default_isp1_monitor3 }}

  # check virtual router ISP1 default ISP1 monitor 4
  - name: vr_isp1_default_route1_mon4
    label: Check virtual-router ISP1 default ISP route monitor 4 GoogleDNS2
    test: |
       (
       vr_isp1_default_isp1_monitor1  | element_value_contains('source', isp1_ipv4)
       and vr_isp1_default_isp1_monitor4 | element_value_contains('enable', 'yes')
       and vr_isp1_default_isp1_monitor4 | element_value_contains('destination', '8.8.4.4')
       and vr_isp1_default_isp1_monitor4 | element_value_contains('interval', '3')
       and vr_isp1_default_isp1_monitor4 | element_value_contains('count', '5')
       ) 
    fail_message: |
      Virtual router does not contain default route to Inet:

      Virtual Router ISP1: {{ virtual_router_isp1 }} 
      IPv4 ISP1 {{ isp1_ipv4 }}
      Monitor 4 GoogleDNS2: {{ vr_isp1_default_isp1_monitor4 }}
      
    pass_message: |
      Virtual router ISP1 contains default route to Inet: 

      Virtual Router ISP1: {{ virtual_router_isp1 }} 
      IPv4 ISP1 {{ isp1_ipv4 }}
      Monitor 4 GoogleDNS2: {{ vr_isp1_default_isp1_monitor4 }}

  # check virtual router ISP1 default ISP1 monitor 5
  - name: vr_isp1_default_route1_mon5
    label: Check virtual-router ISP1 default ISP route monitor 5 CloudFare1
    test: |
       (
       vr_isp1_default_isp1_monitor5  | element_value_contains('source', isp1_ipv4)
       and vr_isp1_default_isp1_monitor5 | element_value_contains('enable', 'yes')
       and vr_isp1_default_isp1_monitor5 | element_value_contains('destination', '1.1.1.1')
       and vr_isp1_default_isp1_monitor5 | element_value_contains('interval', '3')
       and vr_isp1_default_isp1_monitor5 | element_value_contains('count', '5')
       ) 
    fail_message: |
      Virtual router does not contain default route to Inet:

      Virtual Router ISP1: {{ virtual_router_isp1 }} 
      IPv4 ISP1 {{ isp1_ipv4 }}
      Monitor 5 CloudFare1: {{ vr_isp1_default_isp1_monitor5 }}
      
    pass_message: |
      Virtual router ISP1 contains default route to Inet: 

      Virtual Router ISP1: {{ virtual_router_isp1 }} 
      IPv4 ISP1 {{ isp1_ipv4 }}
      Monitor 5 CloudFare1: {{ vr_isp1_default_isp1_monitor5 }}


  # check virtual router ISP1 default ISP1 monitor 6
  - name: vr_isp1_default_route1_mon6
    label: Check virtual-router ISP1 default ISP route monitor 6 CloudFare2
    test: |
       (
       vr_isp1_default_isp1_monitor6  | element_value_contains('source', isp1_ipv4)
       and vr_isp1_default_isp1_monitor6 | element_value_contains('enable', 'yes')
       and vr_isp1_default_isp1_monitor6 | element_value_contains('destination', '1.0.0.1')
       and vr_isp1_default_isp1_monitor6 | element_value_contains('interval', '3')
       and vr_isp1_default_isp1_monitor6 | element_value_contains('count', '5')
       ) 
    fail_message: |
      Virtual router does not contain default route to Inet:
      
      Virtual Router ISP1: {{ virtual_router_isp1 }} 
      IPv4 ISP1 {{ isp1_ipv4 }}
      Monitor CloudFare2: {{ vr_isp1_default_isp1_monitor6 }}

    pass_message: |
      Virtual router ISP1 contains default route to Inet: 

      Virtual Router ISP1: {{ virtual_router_isp1 }} 
      IPv4 ISP1          : {{ isp1_ipv4 }}
      Monitor CloudFare2: {{ vr_isp1_default_isp1_monitor6 }}
      

################################################################################################
#########################    VR-ISP2 Default_ISP2 settings    ##################################
#########################                                     ##################################


  # check default ISP routes on VR-ISP2
  # Default_ISP1 matric 20
  # Default_ISP2 metric 10
  # /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='VR-MIL1-ISP2']/routing-table/ip/static-route/entry[@name='Default_ISP2']
  #
###    <entry name="Default_ISP2">
###      <path-monitor>
###      <monitor-destinations>
###       <entry name="OpenDNS1">
###        <enable>yes</enable>
###        <source>93.39.120.10/29</source>
###        <destination>5.5.5.5</destination>
###        <interval>3</interval>
###        <count>5</count>
###       </entry>

###       <entry name="OpenDNS2">
###        <enable>yes</enable>
###        <source>93.39.120.10/29</source>
###        <destination>3.3.3.3</destination>
###        <interval>3</interval>
###        <count>5</count>
###       </entry>

###    </monitor-destinations>
###    <enable>yes</enable>
###    <failure-condition>any</failure-condition>
###    <hold-time>2</hold-time>
###    </path-monitor>

###    <nexthop>
###     <ip-address>63.247.194.177</ip-address>
###    </nexthop>
###    <interface>ethernet1/4</interface>
###    <metric>10</metric>
###    <destination>0.0.0.0/0</destination>
  # check virtual router ISP2 contains requirements
  - name: vr_isp2_default_route2
    label: Check virtual-router ISP2 contains default_ISP2 route next hop metric 10 interface enabled path mon failure condition
    test: |
       (
       vr_isp2_default_isp2 | element_value_contains('nexthop.ip-address', isp2_nexthop)  
       and vr_isp2_default_isp2 | element_value_contains('metric', '10')
       and vr_isp2_default_isp2 | element_value_contains('destination', '0.0.0.0/0')
       and vr_isp2_default_isp2 | element_value_contains('interface', interface_vr_isp2)      
       and vr_isp2_default_isp2 | element_value_contains('path-monitor.enable', 'yes')
       and vr_isp2_default_isp2 | element_value_contains('path-monitor.failure-condition', 'all')
       ) 
    fail_message: |
      Virtual router does not contain default route to Inet:

      Virtual Router ISP2: {{ virtual_router_isp2 }}
                           {{ vr_isp2_default_isp2 }} 
      
    pass_message: |
      Virtual router ISP2 contains default route to Inet: 

      Virtual Router ISP2: {{ virtual_router_isp2 }} 
                           {{ vr_isp2_default_isp2 }}

################################################################################################
#########################    VR-ISP2 Default_ISP1 settings    ##################################
#########################                                     ##################################


  # check default ISP routes on VR-ISP2
  # Default_ISP1 metric 20
  # 
  # /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='VR-MIL1-ISP2']/routing-table/ip/static-route/entry[@name='Default_ISP1']
  #
###       <entry name="Default_ISP1">
###       <nexthop>
###        <next-vr>VR-MIL1-ISP1</next-vr>
###       </nexthop>
###       <bfd>
###       <profile>None</profile>
###       </bfd>
###       <path-monitor>
###       <enable>no</enable>
###       <failure-condition>any</failure-condition>
###       <hold-time>2</hold-time>
###       </path-monitor>
###       <metric>20</metric>
###       <destination>0.0.0.0/0</destination>

  # check virtual router ISP2 contains requirements
  - name: vr_isp2_default_route_isp1
    label: Check virtual-router ISP2 Default_ISP1 contains default route next hop metric 20 interface enabled path mon failure condition
    test: |
       (
       vr_isp2_default_isp1 | element_value_contains('nexthop.next-vr', virtual_router_isp1)  
       and vr_isp2_default_isp1 | element_value_contains('metric', '20')
       and vr_isp2_default_isp1 | element_value_contains('destination', '0.0.0.0/0')
       and vr_isp2_default_isp1 | element_value_contains('path-monitor.enable', 'no')
       ) 
    fail_message: |
      Virtual router ISP2 does not contain Default_ISP1 route to next VR:

      Virtual Router ISP2 : {{ virtual_router_isp2 }}

      VR-ISP2 Default_ISP1: {{ vr_isp2_default_isp1 }} 
      
    pass_message: |
      Virtual router ISP2 contains Default_ISP1 route to next VR: 

      Virtual Router ISP2 : {{ virtual_router_isp2 }} 
      
      VR-ISP2 Default_ISP1: {{ vr_isp2_default_isp1 }}

################################################################################################
#########################    VR-ISP2 Default_ISP2 monitors    ##################################
#########################                                     ##################################

  # check virtual router ISP2 default ISP2 monitor 1
  - name: vr_isp2_default_route2_mon1
    label: Check virtual-router ISP2 default ISP route monitor 1 OpenDNS1
    test: |
       (
       vr_isp2_default_isp2_monitor1  | element_value_contains('source', isp2_ipv4)
       and vr_isp2_default_isp2_monitor1 | element_value_contains('enable', 'yes')
       and vr_isp2_default_isp2_monitor1 | element_value_contains('destination', '208.67.222.222')
       and vr_isp2_default_isp2_monitor1 | element_value_contains('interval', '3')
       and vr_isp2_default_isp2_monitor1 | element_value_contains('count', '5')
       ) 
    fail_message: |
      Virtual router does not contain default route to Inet:

      Virtual Router ISP2 {{ virtual_router_isp2 }} 
      IPv4 ISP2 {{ isp2_ipv4 }}
      Monitor 1 OpenDNS1: {{ vr_isp2_default_isp2_monitor1 }}

    pass_message: |
      Virtual router ISP2 contains default route to Inet: 

      Virtual Router ISP2: {{ virtual_router_isp2 }} 
      IPv4 ISP2 {{ isp2_ipv4 }}
      Monitor OpenDNS1: {{ vr_isp2_default_isp2_monitor1 }}

  # check virtual router ISP2 default ISP2 monitor 2
  - name: vr_isp2_default_route2_mon2
    label: Check virtual-router ISP2 default ISP2 route monitor 2 OpenDNS2
    test: |
       (
       vr_isp2_default_isp2_monitor2  | element_value_contains('source', isp2_ipv4)
       and vr_isp2_default_isp2_monitor2 | element_value_contains('enable', 'yes')
       and vr_isp2_default_isp2_monitor2 | element_value_contains('destination', '208.67.220.220')
       and vr_isp2_default_isp2_monitor2 | element_value_contains('interval', '3')
       and vr_isp2_default_isp2_monitor2 | element_value_contains('count', '5')
       ) 
    fail_message: |
      Virtual router does not contain default route to Inet:

      Virtual Router ISP2: {{ virtual_router_isp2 }} 
      IPv4 ISP2 {{ isp2_ipv4 }}
      Monitor 2 OpenDNS2: {{ vr_isp2_default_isp2_monitor2 }}

    pass_message: |
      Virtual router ISP2 contains default route to Inet: 

      Virtual Router ISP2: {{ virtual_router_isp2 }} 
      IPv4 ISP2 {{ isp2_ipv4 }}
      Monitor 2 OpenDNS2: {{ vr_isp2_default_isp2_monitor2 }}

  # check virtual router ISP1 default ISP1 monitor 3
  - name: vr_isp2_default_route2_mon3
    label: Check virtual-router ISP2 default ISP2 route monitor 3 GoogleDNS1
    test: |
       (
       vr_isp2_default_isp2_monitor3  | element_value_contains('source', isp2_ipv4)
       and vr_isp2_default_isp2_monitor3 | element_value_contains('enable', 'yes')
       and vr_isp2_default_isp2_monitor3 | element_value_contains('destination', '8.8.8.8')
       and vr_isp2_default_isp2_monitor3 | element_value_contains('interval', '3')
       and vr_isp2_default_isp2_monitor3 | element_value_contains('count', '5')
       ) 
    fail_message: |
      Virtual router does not contain default route to Inet:

      Virtual Router ISP2: {{ virtual_router_isp2 }} 
      IPv4 ISP2 {{ isp2_ipv4 }}
      Monitor 3 GoogleDNS1: {{ vr_isp2_default_isp2_monitor3 }}

    pass_message: |
      Virtual router ISP2 contains default route to Inet: 

      Virtual Router ISP2: {{ virtual_router_isp2 }} 
      IPv4 ISP2 {{ isp2_ipv4 }}
      Monitor 3 GoogleDNS1: {{ vr_isp2_default_isp2_monitor3 }}

  # check virtual router ISP1 default ISP1 monitor 4
  - name: vr_isp2_default_route2_mon4
    label: Check virtual-router ISP2 default ISP2 route monitor 4 GoogleDNS2
    test: |
       (
       vr_isp2_default_isp2_monitor4  | element_value_contains('source', isp2_ipv4)
       and vr_isp2_default_isp2_monitor4 | element_value_contains('enable', 'yes')
       and vr_isp2_default_isp2_monitor4 | element_value_contains('destination', '8.8.4.4')
       and vr_isp2_default_isp2_monitor4 | element_value_contains('interval', '3')
       and vr_isp2_default_isp2_monitor4 | element_value_contains('count', '5')
       ) 
    fail_message: |
      Virtual router does not contain default route to Inet:

      Virtual Router ISP2: {{ virtual_router_isp2 }} 
      IPv4 ISP2 {{ isp2_ipv4 }}
      Monitor 4 GoogleDNS2: {{ vr_isp2_default_isp2_monitor4 }}
      
    pass_message: |
      Virtual router ISP1 contains default route to Inet: 

      Virtual Router ISP2: {{ virtual_router_isp2 }} 
      IPv4 ISP2 {{ isp2_ipv4 }}
      Monitor 4 GoogleDNS2: {{ vr_isp2_default_isp2_monitor4 }}

  # check virtual router ISP2 default ISP1 monitor 5
  - name: vr_isp2_default_route2_mon5
    label: Check virtual-router ISP2 default ISP2 route monitor 5 CloudFare1
    test: |
       (
       vr_isp2_default_isp2_monitor5  | element_value_contains('source', isp2_ipv4)
       and vr_isp2_default_isp2_monitor5 | element_value_contains('enable', 'yes')
       and vr_isp2_default_isp2_monitor5 | element_value_contains('destination', '1.1.1.1')
       and vr_isp2_default_isp2_monitor5 | element_value_contains('interval', '3')
       and vr_isp2_default_isp2_monitor5 | element_value_contains('count', '5')
       ) 
    fail_message: |
      Virtual router does not contain default route to Inet:

      Virtual Router ISP2: {{ virtual_router_isp2 }} 
      IPv4 ISP2 {{ isp2_ipv4 }}
      Monitor 5 CloudFare1: {{ vr_isp2_default_isp2_monitor5 }}
      
    pass_message: |
      Virtual router ISP2 contains default route to Inet: 

      Virtual Router ISP2: {{ virtual_router_isp2 }} 
      IPv4 ISP2 {{ isp2_ipv4 }}
      Monitor 5 CloudFare1: {{ vr_isp2_default_isp2_monitor5 }}


  # check virtual router ISP2 default ISP2 monitor 6
  - name: vr_isp2_default_route2_mon6
    label: Check virtual-router ISP2 default ISP2 route monitor 6 CloudFare2
    test: |
       (
       vr_isp2_default_isp2_monitor6  | element_value_contains('source', isp2_ipv4)
       and vr_isp2_default_isp2_monitor6 | element_value_contains('enable', 'yes')
       and vr_isp2_default_isp2_monitor6 | element_value_contains('destination', '1.0.0.1')
       and vr_isp2_default_isp2_monitor6 | element_value_contains('interval', '3')
       and vr_isp2_default_isp2_monitor6 | element_value_contains('count', '5')
       ) 
    fail_message: |
      Virtual router does not contain default route to Inet:
      
      Virtual Router ISP2: {{ virtual_router_isp2 }} 
      IPv4 ISP2 {{ isp2_ipv4 }}
      Monitor CloudFare2: {{ vr_isp2_default_isp2_monitor6 }}

    pass_message: |
      Virtual router ISP2 contains default route to Inet: 

      Virtual Router ISP2: {{ virtual_router_isp2 }} 
      IPv4 ISP2          : {{ isp2_ipv4 }}
      Monitor CloudFare2: {{ vr_isp2_default_isp2_monitor6 }}
