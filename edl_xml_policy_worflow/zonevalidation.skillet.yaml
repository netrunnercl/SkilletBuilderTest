#
# Example Validation Skillety
#
name: example-validate-with-xpath-capture
label: A skillet standar-validation that Checks for Interfaces, Zones and Virtual routers names in place in double ISP environment.

description: |
  This Skillet validates a firewall standarization on 3 virtual routers, checks interfaces and zones

type: pan_validation
labels:
  collection:
    - Example Skillets
    - Validation

variables:
  # this willy allow the user to input a zone name to test
  - name: zone_to_test
    description: Name of the Security Zone facing Internet AKA Untrust
    default: untrust
    type_hint: text
  # as well as an IP address to search for as well
  - name: ip_to_find
    description: IP Address to locate
    default: 217.56.70.190/29
    type_hint: text    
  # virtual router MAIN
  - name: virtual_router_main
    description: virtual router main to check
    default: VR-MIL1
    type_hint: text
  # virtual router ISP1
  - name: virtual_router_isp1
    description: virtual router ISP1 to check
    default: VR-MIL1-ISP1
    type_hint: text
  # interface_vr_isp1
  - name: interface_vr_isp1
    description: Interface on ISP1
    default: ethernet1/1
    type_hint: text 
  # virtual router ISP2
  - name: virtual_router_isp2
    description: virtual router ISP2 to check
    default: VR-MIL1-ISP2
    type_hint: text
  # interface_vr_isp2
  - name: interface_vr_isp2
    description: interface on ISP2
    default: ethernet1/4
    type_hint: text



snippets:
  - name: parse config variable and capture outputs
    cmd: parse
    variable: config
    outputs:
      # create a variable named 'zone_names' which will be a list of the attribute 'names' from each zone
      # note the use of '//' to select all zones
      # the '@name' will return only the value of the attribute 'name' from each 'entry'
      - name: zone_names
        capture_pattern: /config/devices/entry/vsys/entry/zone//entry/@name
      # note here we can combine an advanced xpath query with 'capture_object'. This will capture
      # the full interface definition from the interface that contains the 'ip_to_find' value
      - name: interface_with_ip
        capture_object: /config/devices/entry/network/interface/ethernet//entry/layer3/ip/entry[@name="{{ ip_to_find }}"]/../..
      ##### Interfaces on Virtual routers
      - name: interfaces_vr_isp1
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp1 }}']/interface
      - name: interfaces_vr_isp2
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_isp2 }}']/interface
      ##### Default routers main VR
      - name: main_default_isp1
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_main }}']/routing-table/ip/static-route/entry[@name='Default_ISP1']
      - name: main_default_isp2
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='{{ virtual_router_main }}']/routing-table/ip/static-route/entry[@name='Default_ISP2']



  # simple test using a jinja expression to verify the 'zone_to_test' variable is not in the 'zone_names' test
  - name: ensure_desired_zone_present_from_list
    # pan_validation skillet have a default cmd of 'validate'
    cmd: validate
    # note here that you can use jinja variable interpolation just about anywhere
    label: Ensures the {{ zone_to_test }} zone is configured
    test: zone_to_test in zone_names
    fail_message: |
      This fail message contains a variable, which is useful for debugging and testing.
      captured values were: {{ zone_names | tojson() }} and {{ interface_with_ip | default('none')| tojson() }}
    pass_message: |
      This pass message contains a variable, which is useful for debugging and testing.
      captured values were: {{ zone_names | tojson() }} and {{ interface_with_ip | default('none')| tojson() }}
    # documentation link helps give the user some context about why this test failed or how to manually remediate
    documentation_link: https://github.com/PaloAltoNetworks/skilletlib/blob/develop/docs/source/examples.rst
    
###############################################################################
  # the test checks use the dot notation to walk down the object tree to find children and values
  - name: device_network_vr
    cmd: parse
    variable: config
    outputs:
      - name: network_vr
        capture_object: /config/devices/entry[@name='localhost.localdomain']/network/virtual-router
        
  - name: network_vrs
    label: check all 3 virtual routers as main local isp and expereo
    test: |
       (
       network_vr | attribute_present('entry', 'name', '{{ main_vr }}')
       and network_vr | attribute_present('entry', 'name', '{{ local_isp_vr }}')
       and network_vr | attribute_present('entry', 'name', '{{ expereo_isp_vr }}')
       )
    fail_message: |
      All three virtual routers required are not present: {{ main_vr }}, {{ local_isp_vr }}, {{ expereo_isp_vr }}
    pass_message: |
      All three virtual routers required are present: {{ main_vr }}, {{ local_isp_vr }}, {{ expereo_isp_vr }}
    documentation_link: 
#####################################################################################
  # check if interfaces are in the right virtual router
  - name: vr_isp1
    label: check virtual router isp1 contains interface {{ interface_vr_isp1 }}
    test: interfaces_vr_isp1 | element_value_contains('interface.member', interface_vr_isp1)  
    fail_message: |
      Virtual router ISP1 does not contain Interface ISP1: {{ interface_vr_isp1 }}, {{ interfaces_vr_isp1 }}, {{ virtual_router }}
    pass_message: |
      Virtual router ISP contains Interface ISP1: {{ interface_vr_isp1 }}, {{ interfaces_vr_isp1 }}, {{ virtual_router }}


  - name: vr_isp2
    label: check virtual router isp2 contains interface {{ interface_vr_isp2 }}
    test: interfaces_vr_isp2 | element_value_contains('interface.member', interface_vr_isp2)  
    fail_message: |
      Virtual router ISP2 does not contain Interface ISP2: {{ interface_vr_isp2 }}, {{ interfaces_vr_isp2 }}, {{ virtual_router }}
    pass_message: |
      Virtual router ISP2 contains Interface ISP2: {{ interface_vr_isp2 }}, {{ interfaces_vr_isp2 }}, {{ virtual_router }}

################################################################################
  # check default ISP routes on main VR towards VR-ISP1 & VR-ISP2
  # Default_ISP1
  # Default_ISP2 metric 20
  # /config/devices/entry[@name='localhost.localdomain']/network/virtual-router/entry[@name='VR-MIL1']/routing-table/ip/static-route/entry[@name='Default_ISP1']
  #
###  <entry name="Default_ISP1">
###  
###  <path-monitor>
###    <enable>no</enable>
###    <failure-condition>any</failure-condition>
###    <hold-time>2</hold-time>
###  </path-monitor>
###  
###  <nexthop>
###    <next-vr>VR-MIL1-ISP1</next-vr>
###  </nexthop>
###  
###  <bfd>
###    <profile>None</profile>
###  </bfd>
###  
###  <metric>10</metric>
###  <destination>0.0.0.0/0</destination>
###  
###  <route-table>
###  <unicast/>
###  </route-table>
###
### main_default_isp1
### main_default_isp1
###
  # check if interfaces are in the right virtual router
  - name: vr_isp1_default_route
    label: check virtual router isp1 contains route
    test: main_default_isp1 | element_value_contains('nexthop.next-vr', virtual_router_isp1)  
    fail_message: |
      Main Virtual router does not contain default route to ISP1: {{ virtual_router_isp1 }}, {{ interfaces_vr_isp1 }}, {{ virtual_router }}
    pass_message: |
      Main Virtual router contains default route to ISP1: {{ virtual_router_isp1 }}, {{ interfaces_vr_isp1 }}, {{ virtual_router }}


